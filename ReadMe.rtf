{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14760\viewh19580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 README\
\
- Import in this folder a copy of the original Therm Table\
- Rename the Original Table \'93Table1.csv\'94 - be exact in the name!!\
- Modify the User_Input.csv table to incorporate all the assays you have, and the specific location of each well\
\
OBS: you very commonly fill up this table incompletely that results in errors!!\
\
- When modify the User_Inout table, make sure you ERASE ANYTHING (even a blank cell) from underneath the last row (the program sometimes see the leftovers and tries to continue reading rows)\
- The program takes into consideration \ul continues\ulnone  and \ul ordered\ulnone  use of wells in the 96WP sent for IDAA - the program may still be working fine if some wells are to be missing from the run (as in, Table1.csv does not contains a raw for each of the 96 wells). \
- Beware of the way the facility lab that runs the IDAA plate \ul labels the samples\ulnone  (usually first column in the exported Thermo Table): In the 
\f1\b #run loop
\f0\b0  section, the program relies on a \ul specific order of information\ulnone  present in the \'93Sample File Name\'94 column of Table1.csv. \
In particular, the program expect this:\
\
RICC_B05_B5_045_2020-01-21.fsa
\f2\i \
DATE_PLATE#_WELL#_ etc etc
\f0\i0 \

\f2\i \
Standardize labeling:\

\f0\i0 RUN_200225_B_A01_A1_015_date.fsa\

\f2\i RUN_plateID_plate.letter_Well_Well_number_YYYY-MM-DD.fsa\

\f0\i0 \
If the Sample File Name is named differently, take a look at 
\f1\b #run loop
\f0\b0  part to fix it: \
\

\f1\b key.split(\'93_\'94)[2]\

\f0\b0 make sure Sample Name is splittable using \'93_\'94, and that location [n] holds the number/letter of the plate\
\

\f1\b key.split(\'93_\'94)[4]
\f0\b0 \
make sure this location in the SampleName hold the well ID in a format that is \'91A1\'92, not \'91A01\'92\
\

\f1\b WellID = key.split("_")[4]
\f0\b0 \
make sure this IS the location of the well ID in SampleName a format that is \'91A1\'92, not \'91A01\'92\
\
- The program does take into consideration you may have 
\f1\b more then one plate
\f0\b0  in Table1.csv, and each plate may contain more then one PP. Make sure that in User_Input.csv you have correctly placed the plate ID (it does\'92t have to be a number, it can also be a string - most recent agreement in plate labeling from Dixon, the PlatesID are continuous letters A,B,C\'85. etc\'85 ).\
\
Explanations of output table\

\f1\b well#
\f0\b0 \

\f1\b PotentialPeak1_Search1_S / *H
\f0\b0  = using first peak as a guidance, this is the peak S and H of the HIGHEST peak in tollerance\

\f1\b PotentialPeak1_Search2_S / *H 
\f0\b0 = using first peak as guidance, this is the peak S and H with the SIZE closest to the expected size (yet this may not be the highest product)\

\f1\b PotentialPeak2_ect
\f0\b0  = as above, but for the second Alt-spl peak\
\
HighestPeak_S, HighestPeak_H = the absolute highest peak in reaction (that passed Dictionary filtering) S and H\
\
SecondHighestPeak_S,SecondHighestPeak_H = self explanatory\
\
TotNumbPeaks = how many peaks the PCR has\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}